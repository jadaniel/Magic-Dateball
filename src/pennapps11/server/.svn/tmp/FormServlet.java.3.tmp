package pennapps11.server;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;
import javax.servlet.http.*;
import org.json.*;
<<<<<<< .mine
=======

>>>>>>> .r58
import pennapps11.server.hunch.JSONHandling;
import pennapps11.server.hunch.PreferenceCategory;
import pennapps11.server.hunch.HunchRecommendation;
import pennapps11.server.hunch.Topic;


public class FormServlet extends HttpServlet {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final Logger log = Logger.getLogger(FormServlet.class.getName());
    String FB_ID, TW_ID, food, music, drinks, movies, active, zip;
    HashMap<PreferenceCategory, String> hunchQuery;
    
   

    public void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {

        // Pull user form input from .jsp
        @SuppressWarnings("unchecked")
		Map<String, String> requestParameterMap = req.getParameterMap();
        
        
        // If user has entered a value, pull that value and place into a map w/ Preference category
        for(PreferenceCategory cat : PreferenceCategory.values()){
        	if (requestParameterMap.containsKey(cat.getFormField())) {
//        		hunchQuery.put(cat, requestParameterMap.get(cat.getFormField()));
        	}
        }
        

        //TODO get real json
        //String returnFromResults = HunchClient.getResultIDs(hunchQuery); //TODO need to separate IDs!
        String sampleJSON= "{'total': 3841, 'ok': true, 'results': [{'url': 'http://hunch.com/item/hn_1882014/', 'result_id': 'hn_1882014', 'image_url': 'http://aka-img-1.h-img.com/media/img/b/hn/1882014/8078020434315226016', 'name': 'The Beatles - The White Album'}, {'url': 'http://hunch.com/item/hn_2466744/', 'result_id': 'hn_2466744', 'image_url': 'http://aka-img-2.h-img.com/media/img/b/hn/2466744/4435353142136457893', 'name': 'Beatles for Sale'}, {'url': 'http://hunch.com/item/hn_2747104/', 'result_id': 'hn_2747104', 'image_url': 'http://aka-img-1.h-img.com/media/img/b/hn/2747104/1828851390027614509', 'name': 'With the Beatles'}, {'url': 'http://hunch.com/item/hn_3569584/', 'result_id': 'hn_3569584', 'image_url': 'http://aka-img-1.h-img.com/media/img/b/hn/3569584/3519388481926086177', 'name': 'The Beatles'}, {'url': 'http://musicbrainz.org/release-group/055be730-dcad-31bf-b550-45ba9c202aa3', 'result_id': 'mb_055be730-dcad-31bf-b550-45ba9c202aa3', 'name': 'The Beatles'}, {'url': 'http://musicbrainz.org/release-group/a63dc65f-09f2-359b-a10e-648f00ecd96c', 'result_id': 'mb_a63dc65f-09f2-359b-a10e-648f00ecd96c', 'name': 'With The Beatles'}, {'url': 'http://musicbrainz.org/release-group/f50a3b6f-27f0-3832-bd3f-3568dc557d95', 'result_id': 'mb_f50a3b6f-27f0-3832-bd3f-3568dc557d95', 'name': 'Beatles for Sale'}, {'url': 'http://musicbrainz.org/recording/41409bc8-24f7-472d-8ca9-ceee871c7920', 'result_id': 'mb_41409bc8-24f7-472d-8ca9-ceee871c7920', 'name': 'The Beatles'}, {'url': 'http://musicbrainz.org/recording/b03f0614-1132-49da-a67e-1a50c31632de', 'result_id': 'mb_b03f0614-1132-49da-a67e-1a50c31632de', 'name': 'Beatles'}, {'url': 'http://www.pandora.com/music/album/beatles/beatles+for+sale', 'result_id': 'pandora_al77774643825', 'image_url': 'http://cont-sjl-2.pandora.com/images/public/amz/5/2/8/3/077774643825_500W_500H.jpg', 'name': 'Beatles For Sale'}]}";
        
        JSONHandling jsonHandling = new JSONHandling(sampleJSON);
        try {
			jsonHandling.myJsonParser();
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
        //TODO send HashMap to hunch engine
		
		//get reccomendations returns JSON
		
		//parse reccomendations JSON and build list of HunchReccomendations
		String recsJSON = "{'total': 3924, 'ok': true, 'is_personalized': true, 'recommendations': [{'image_urls': ['http://aka-img-2.h-img.com/media/img/s/K/O/e/KOe-10846772.jpg'], 'name': 'We Own the Sky', 'score': [0, 0, 4.850591096197137, false, 0.9626477740492841], 'result_id': 'hn_3849611'}, {'image_urls': ['http://aka-img-2.h-img.com/media/img/s/v/e/v/vev-10030324.jpg', 'http://aka-img-2.h-img.com/media/img/s/E/6/Z/E6Z-6256661.jpg'], 'name': 'Imogen Heap', 'score': [0, 0, 4.769246287118834, false, 0.9423115717797085], 'result_id': 'hn_3209621'}, {'image_urls': ['http://aka-img-2.h-img.com/media/img/s/H/S/C/HSC-9921524.jpg', 'http://aka-img-2.h-img.com/media/img/s/j/i/m/jimmy-eat-world-2475394.jpg', 'http://aka-img-1.h-img.com/media/img/p/pandora/ar75839/577a50fdcf9e8b799dbc013dedee9782211ed5ef'], 'name': 'Jimmy Eat World', 'score': [0, 0, 4.753707117497436, false, 0.938426779374359], 'result_id': 'hn_1571784'}]}";
		JSONTokener recsTokener = new JSONTokener(recsJSON);
		try {
			JSONObject recsObj = new JSONObject(recsTokener);
			
			JSONArray recommendations = recsObj.getJSONArray("recommendations");
			
			ArrayList<HunchRecommendation> myRecs = new ArrayList<HunchRecommendation>();
			for(int i = 0; i < recommendations.length(); i++){
				
				JSONObject thisOne = recommendations.getJSONObject(i);
				
				Topic topic;
				AdviceCategory adviceCategory;
				String name = thisOne.getString("name");
				String imageURL = thisOne.getJSONArray("image_urls").getString(0); 
				double score = thisOne.getJSONArray("score").getDouble(4);
				score = score + 0.0;
//				HunchRecommendation tempHunchRec = new HunchRecommendation(name, topic, adviceCategory, imageURL, score);

				
				
				
//				resultID = results.getJSONObject(i).getString("result_id");	
			}
			
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
        
        
        resp.sendRedirect("/results.jsp?gwt.codesvr=127.0.0.1:9997"); //prob don't need this - send to hunch engine

    }
}